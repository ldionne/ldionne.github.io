<%
require 'benchmark'
require 'open3'
require 'pathname'
require 'tilt'

def measure(namespace)
    template = Pathname.new('benchmark_1.erb.cpp').expand_path
    cpp = Pathname.new('__tmp.cpp').expand_path
    clang = "~/code/llvm/release/bin/clang++" # <- My own modified Clang
    command = "#{clang} -std=c++14 -o/dev/null -ftemplate-depth=-1 #{cpp}"

    times = []
    (1..500).step(50).each do |n|
        puts "#{namespace}: #{n} / 500"
        code = Tilt::ERBTemplate.new(template).render(nil, namespace: namespace, n: n)
        cpp.write(code)
        stdout, stderr, status = nil, nil, nil
        time = Benchmark.realtime {
            stdout, stderr, status = Open3.capture3(command)
        }
        raise "compilation error: #{stderr}\n\n#{code}" if not status.success?
        times << [n, time]
    end

    return times

ensure
    cpp.delete if cpp.exist?
end

%>

{
    "title": {
        "text": "Compile-time behaviour of getting n elements in a tuple"
    },
    "xAxis": {
        "title": {
            "text": "Number of elements"
        },
        "minTickInterval": 1
    },
    "series": [
        {
            "name": "atoms",
            "data": <%= measure('atoms') %>
        }, {
            "name": "flat",
            "data": <%= measure('flat') %>
        }, {
            "name": "lambda",
            "data": <%= measure('lambda') %>
        }, {
            "name": "raw",
            "data": <%= measure('raw') %>
        }, {
            "name": "baseline",
            "data": <%= measure('baseline') %>
        }
    ]
}